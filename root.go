package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vugu"

import (
	"strconv"
)

type RootData struct {
	Show   bool
	Count  int
	Result string
	Op     string
	Ac     string
}

type Operator int

const (
	Plus Operator = iota
	Sub
	Mul
	Div
	None
)

var (
	accumulator = ""
	operator    = None
)

func (data *RootData) Toggle() {
	data.Show = !data.Show
}

func (data *RootData) Increment() {
	data.Count++
}

func (data *RootData) Decrement() {
	data.Count--
}

func (data *RootData) InputNum(i int) {
	if data.Result == "0" {
		data.Result = ""
	}
	data.Result += strconv.Itoa(i)
}

func (data *RootData) ClearNum() {
	data.Result = "0"
}

func (data *RootData) DoOperate(op string) {
	accumulator += data.Result
	data.Ac = data.Result
	data.Result = "0"

	switch op {
	case "+":
		operator = Plus
	case "-":
		operator = Sub
	case "*":
		operator = Mul
	case "/":
		operator = Div
	default:
		operator = None
	}

	data.Op = op
	data.Show = true
}

func (data *RootData) DoEqual() {
	// former, _ := strconv.Atoi(accumulator)
	// latter, _ := strconv.Atoi(data.Result)
	former, _ := strconv.ParseFloat(accumulator, 64)
	latter, _ := strconv.ParseFloat(data.Result, 64)

	accumulator = ""

	var result float64
	switch operator {
	case Plus:
		result = former + latter
	case Sub:
		result = former - latter
	case Mul:
		result = former * latter
	case Div:
		result = former / latter
	}

	// data.Result = strconv.Itoa(result)
	data.Result = fmt.Sprint(result)
	data.Show = false
}

var _ vugu.ComponentType = (*Root)(nil)

func (comp *Root) BuildVDOM(dataI interface{}) (vdom *vugu.VGNode, css *vugu.VGNode, reterr error) {
	data := dataI.(*RootData)
	_ = data
	_ = fmt.Sprint
	_ = reflect.Value{}
	event := vugu.DOMEventStub
	_ = event
	css = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "style", DataAtom: vugu.VGAtom(458501), Namespace: "", Attr: []vugu.VGAttribute(nil)}
	css.AppendChild(&vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    .my-first-vugu-comp {\n        background: #eee;\n    }\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)})
	var n *vugu.VGNode
	n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "my-first-vugu-comp"}}}
	vdom = n
	{
		parent := n
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " <button @click=\"data.Toggle()\">Test</button> ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		if data.Show {
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(4), Data: " calculator ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		if data.Show {
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "style", Val: "display: inline-block;"}}}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n.InnerHTML = fmt.Sprint(data.Ac)
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "p", DataAtom: vugu.VGAtom(3073), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n.InnerHTML = fmt.Sprint(data.Op)
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "table", DataAtom: vugu.VGAtom(365829), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "id", Val: "calculator"}}}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "strong", DataAtom: vugu.VGAtom(449798), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "span", DataAtom: vugu.VGAtom(40708), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n.InnerHTML = fmt.Sprint(data.Result)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "br", DataAtom: vugu.VGAtom(514), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.ClearNum() }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.ClearNum
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("ClearNum"),
				Args:                  []interface{}{},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.ClearNum()
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "C", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.DoOperate(string('+')) }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.DoOperate
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("DoOperate"),
				Args:                  []interface{}{string('+')},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.DoOperate(string('+'))
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "+", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.DoOperate(string('-')) }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.DoOperate
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("DoOperate"),
				Args:                  []interface{}{string('-')},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.DoOperate(string('-'))
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "-", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.DoOperate(string('*')) }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.DoOperate
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("DoOperate"),
				Args:                  []interface{}{string('*')},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.DoOperate(string('*'))
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "*", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.DoOperate(string('/')) }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.DoOperate
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("DoOperate"),
				Args:                  []interface{}{string('/')},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.DoOperate(string('/'))
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "/", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.DoEqual() }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.DoEqual
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("DoEqual"),
				Args:                  []interface{}{},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.DoEqual()
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "=", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		for i := 0; i < 10; i++ {
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				n.InnerHTML = fmt.Sprint(i)
				// @click = { data.InputNum(i) }
				{
					var i_ interface{} = data
					idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
					var i2_ interface{} = data.InputNum
					i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
					n.SetDOMEventHandler("click", vugu.DOMEventHandler{
						ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
						Method:                reflect.ValueOf(data).MethodByName("InputNum"),
						Args:                  []interface{}{i},
					})
				}
				if false {
					// force compiler to check arguments for type safety
					data.InputNum(i)
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
	}
	return
}

type Root struct {}

func (ct *Root) NewData(props vugu.Props) (interface{}, error) { return &RootData{}, nil }

func init() { vugu.RegisterComponentType("root", &Root{}) }
