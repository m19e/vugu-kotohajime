<div class="my-first-vugu-comp">
    <!-- <button @click="data.Toggle()">Test</button> -->
    <div vg-if="data.Show"></div>
    <br />
    <!-- calculator -->
    <div vg-if="data.Show" style="display: inline-block;">
        <p vg-html="data.Ac"></p>
        <p vg-html="data.Op"></p>
    </div>
    <table id="calculator"></table>
    <strong><span vg-html="data.Result"></span></strong>
    <br />
    <button @click="data.ClearNum()">C</button>
    <button @click="data.DoOperate(string('+'))">+</button>
    <button @click="data.DoOperate(string('-'))">-</button>
    <button @click="data.DoOperate(string('*'))">*</button>
    <button @click="data.DoOperate(string('/'))">/</button>
    <button @click="data.DoEqual()">=</button>
    <div vg-for="i := 0; i < 10; i++">
        <button @click="data.InputNum(i)" vg-html="i"></button>
    </div>
</div>

<style>
    .my-first-vugu-comp {
        background: #eee;
    }
</style>

<script type="application/x-go">

    import("strconv")

    type RootData struct {
        Show bool
        Count int
        Result string
        Op string
        Ac string
    }

    type Operator int

    const (
        Plus Operator = iota
        Sub
        Mul
        Div
        None
    )

    var (
        accumulator =   ""
        operator =      None
    )

    func (data *RootData) Toggle() {
        data.Show = !data.Show
    }

    func (data *RootData) Increment() {
        data.Count++
    }

    func (data *RootData) Decrement() {
        data.Count--
    }

    func (data *RootData) InputNum(i int) {
        if data.Result == "0" { data.Result = "" }
        data.Result += strconv.Itoa(i)
    }

    func (data *RootData) ClearNum() {
        data.Result = "0"
    }

    func (data *RootData) DoOperate(op string) {
        accumulator += data.Result
        data.Ac = data.Result
        data.Result = "0"

        switch op {
        case "+":
            operator = Plus
        case "-":
            operator = Sub
        case "*":
            operator = Mul
        case "/":
            operator = Div
        default:
            operator = None
        }

        data.Op = op
        data.Show = true
    }

    func (data *RootData) DoEqual() {
        former, _ := strconv.Atoi(accumulator)
        latter, _ := strconv.Atoi(data.Result)

        accumulator = ""

        var result int
        switch operator {
        case Plus:
            result = former + latter
        case Sub:
            result = former - latter
        case Mul:
            result = former * latter
        case Div:
            result = former / latter
        }

        data.Result = strconv.Itoa(result)
        data.Show = false
    }
</script>
